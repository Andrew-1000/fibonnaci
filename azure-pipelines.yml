trigger:
- master

stages: 
- stage: 'BuildTest'
  displayName: 'Build and Test'
  variables :
    GOVERSION: '1.18'
    CGO_ENABLED: '0'
    GOOS: 'linux'
    GOARCH: 'amd64'
  jobs:
  - job: BuildTestBackend
    displayName: 'Build and Test Go Backend'
    pool:
      vmImage: 'Ubuntu 18.04'

    steps:
    - task: GoTool@0
      inputs:
        version: $(GOVERSION)
      displayName: 'Install and Select Go version $(GOVERSION)'
    - script: |
        # Get tools for converting Go's test reports
        go get -u github.com/jstemmer/go-junit-report 2>&1
        go get -u github.com/axw/gocov/gocov 2>&1
        go get -u github.com/AlekSi/gocov-xml 2>&1
        # Run Go tests and turn output into JUnit test result format
        go test ./algorithms -v -coverprofile=demo-coverage.txt -covermode count 2>&1 | /home/andrew/go/bin/go-junit-report > demo-report.xml
        rc=${PIPESTATUS[0]} # Get result code of `go test`
        # Convert coverage file into XML
        /home/andrew/go/bin/gocov convert demo-coverage.txt > demo-coverage.json
        /home/andrew/go/bin/gocov-xml < demo-coverage.json > demo-coverage.xml
        # Check if `go test` had an error
        if [ $rc -ne 0 ]; then
          # Let script fail by writing to stderr
          >&2 echo "Tests failed"
        fi
      displayName: 'Run unit tests and convert results'
      failOnStderr: true

- task : Go@0
  inputs:
    command: 'build'
    arguments: '-a -o demo'
  displayName: 'Build Go App'


- publish: '$(Build.SourceDirectory)/demo'
  artifact: 'Executable'
  displayName: 'Publish pipeline artifact'


- task: PublishCodeCoverageResults@1
  condition: always()
  inputs:
  codeCoverageTool: 'Cobertura'
  summaryFileLocation: '$(Build.SourcesDirectory)/demo-coverage.xml'
  displayName: 'Publish code coverage results'
